/*
 * 
 */

package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;
import java.util.List;

import javax.swing.JPanel;
import javax.swing.KeyStroke;

import model.AbstractPiece;
import model.Block;
import model.Board;
import model.Piece;
import Controller.AbstractTetrisAction;

/**
 * @author Kyle Martens
 * @version 1.0
 */
@SuppressWarnings("serial")
public class TetrisBoardPanel extends JPanel {
    
    /**
     * 
     */
    private static final int BOARD_SCALAR = 25;
    
    /**
     * 
     */
    private static final int ROUNDING_DIVISOR = 3;
    
    /**
     * 
     */
    private static final int ROUNDING_SCALAR = BOARD_SCALAR / ROUNDING_DIVISOR;

    /**
     * 
     */
    private static final int OUTER_BLOCK_PADDING = 1;
    
    /**
     * 
     */
    private static final int OUTER_BLOCK_SIZE = OUTER_BLOCK_PADDING * 2;
    
    /**
     * 
     */
    private Board myBoard;
    
    /**
     * 
     * @param theBoard 
     */
    public TetrisBoardPanel(final Board theBoard) {
        super();
        myBoard = theBoard;
        setPreferredSize(new Dimension(myBoard.getWidth() * BOARD_SCALAR,
                                       myBoard.getHeight() * BOARD_SCALAR));
        
//        getInputMap().put(KeyStroke.getKeyStroke("LEFT"), "left");
//        getActionMap().put("left", new AbstractTetrisAction());
//
//        getInputMap().put(KeyStroke.getKeyStroke("RIGHT"), "right");
//        getActionMap().put("right", new AbstractTetrisAction());
//        
//        getInputMap().put(KeyStroke.getKeyStroke("DOWN"), "down");
//        getActionMap().put("down", new AbstractTetrisAction());
//        
//        getInputMap().put(KeyStroke.getKeyStroke("UP"), "up");
//        getActionMap().put("up", new AbstractTetrisAction());
//
//        getInputMap().put(KeyStroke.getKeyStroke("SPACE"), "space");
//        getActionMap().put("space", new AbstractTetrisAction());
//
//        getInputMap().put(KeyStroke.getKeyStroke("P"), "p");
//        getActionMap().put("p", new AbstractTetrisAction());

    }
    
    /**
     * {@inheritDoc}
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        g2d.drawRect(0, 0, myBoard.getWidth() * BOARD_SCALAR + 1,
                     myBoard.getHeight() * BOARD_SCALAR + 1);
        
        for (int i = 0; i < myBoard.getWidth(); i++) {
            for (int j = 0; j < myBoard.getHeight(); j++) {
                final Shape backgroundBlock = getTetrisBlock(i, j, OUTER_BLOCK_PADDING,
                                                         OUTER_BLOCK_SIZE);
                g2d.setColor(Color.BLACK);
                g2d.draw(backgroundBlock);
                g2d.setColor(Color.WHITE);
                g2d.fill(backgroundBlock);
            }
        }
        
        drawCurrentShape(g2d);
        drawFrozenBlocks(g2d);
    }
    
    /**
     * 
     * @param theGraphics 
     */
    private void drawCurrentShape(final Graphics2D theGraphics) {
        final Piece curPiece = myBoard.getCurrentPiece();
        final int[][] coords = ((AbstractPiece) curPiece).getBoardCoordinates();
        for (int i = 0; i < coords.length; i++) {
            final Shape tetrisPiece = getTetrisBlock(coords[i][0], coords[i][1],
                                                     OUTER_BLOCK_PADDING, OUTER_BLOCK_SIZE);
            
            theGraphics.setColor(Color.BLACK);
            theGraphics.draw(tetrisPiece);
            final Color blockColor = ((AbstractPiece) curPiece).getBlock().getColor();
            theGraphics.setColor(blockColor);
            theGraphics.fill(tetrisPiece);
        }
    }    
    /**
     * 
     * @param theGraphics 
     */
    private void drawFrozenBlocks(final Graphics2D theGraphics) {
        final List<Block[]> blockRow = myBoard.getFrozenBlocks();
        for (int row = 0; row < blockRow.size(); row++) {
            final Block[] blocks = blockRow.get(row);
            for (int col = 0; col < blocks.length; col++) {
                if (blocks[col] != Block.EMPTY) {
                    final Shape tetrisBlock = getTetrisBlock(col, row, OUTER_BLOCK_PADDING,
                                                             OUTER_BLOCK_SIZE);
                    
                    theGraphics.setColor(Color.BLACK);
                    theGraphics.draw(tetrisBlock);
                    theGraphics.setColor(Color.LIGHT_GRAY);
                    theGraphics.fill(tetrisBlock);
                }
            }
        }
    }
    
    /**
     * 
     * @param theX 
     * @param theY 
     * @param thePadding 
     * @param theSideLength 
     * @return
     */
    private Shape getTetrisBlock(final int theX, final int theY, final int thePadding,
                                 final int theSideLength) {
        return new RoundRectangle2D.Float(theX * BOARD_SCALAR + thePadding,
            (myBoard.getHeight() - (theY + 1)) * BOARD_SCALAR + thePadding,
            BOARD_SCALAR - theSideLength, BOARD_SCALAR - theSideLength,
            ROUNDING_SCALAR, ROUNDING_SCALAR);
    }
}
