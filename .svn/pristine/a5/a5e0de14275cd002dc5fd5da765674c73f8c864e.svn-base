/*
 * TCSS 305 – Autumn 2013
 * Assignment 6 - Tetris
 */

package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;

import javax.swing.BorderFactory;
import javax.swing.JPanel;

import model.AbstractPiece;
import model.Piece;

/**
 * Represents a panel to display the next piece of a tetris game.
 * 
 * @author Kyle Martens
 * @version 1.0
 */
@SuppressWarnings("serial")
public class NextPiecePanel extends JPanel {
    
    /**
     * The scalar used to scale the size of the blocks.
     */
    private static final int BOARD_SCALAR = 25;
    
    /**
     * The number of blocks for the width.
     */
    private static final int WIDTH = 5;
    
    /**
     * The number of blocks for the height.
     */
    private static final int HEIGHT = 4;
    
    /**
     * The denominator for the ratio to round the corners of the pieces.
     */
    private static final int ROUNDING_DIVISOR = 3;
    
    /**
     * The scalar to round the corners of the pieces.
     */
    private static final int ROUNDING_SCALAR = BOARD_SCALAR / ROUNDING_DIVISOR;
    
    /**
     * The padding between blocks.
     */
    private static final int OUTER_BLOCK_PADDING = 1;
    
    /**
     * The length of the sides of the blocks.
     */
    private static final int OUTER_BLOCK_SIZE = OUTER_BLOCK_PADDING * 2;
    
    /**
     * The size of the panel.
     */
    private static final Dimension SCREEN_SIZE = new Dimension(BOARD_SCALAR * WIDTH,
                                                               BOARD_SCALAR * HEIGHT);
    
    /**
     * The next piece in the game.
     */
    private Piece myNextPiece;
    
    /**
     * Constructs a new instance of the panel.
     * 
     * @param theNextPiece the next piece in the game.
     */
    public NextPiecePanel(final Piece theNextPiece) {
        myNextPiece = theNextPiece;
        setPreferredSize(SCREEN_SIZE);
        setBackground(Color.WHITE);
        setBorder(BorderFactory.createTitledBorder("Next Piece"));
    }
    
    /**
     * Sets the next piece to the one given.
     * 
     * @param theNextPiece the next piece in the game.
     */
    public void setNextPiece(final Piece theNextPiece) {
        myNextPiece = theNextPiece;
    }
    
    /**
     * @return the nextPiece in the game.
     */
    public Piece getNextPiece() {
        return myNextPiece;
    }
    
    /**
     * {@inheritDoc}
     * 
     * Draws the next Piece.
     */
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        final int[][] coords = ((AbstractPiece) myNextPiece).getRotation();

        for (int i = 0; i < coords.length; i++) {
            final Shape tetrisPiece = getTetrisBlock(coords[i][0], coords[i][1],
                                                     OUTER_BLOCK_PADDING, OUTER_BLOCK_SIZE);
            
            g2d.setColor(Color.BLACK);
            g2d.draw(tetrisPiece);
            final Color blockColor = ((AbstractPiece) myNextPiece).getBlock().getColor();
            g2d.setColor(blockColor);
            g2d.fill(tetrisPiece);
        }
    }
    
    /**
     * Makes a new block shape.
     * 
     * @param theX the x coordinate of the shape.
     * @param theY the y coordinate of the shape.
     * @param thePadding the amount of padding between blocks.
     * @param theSideLength the length of one side of the shape.
     * @return the newly created block.
     */
    private Shape getTetrisBlock(final int theX, final int theY, final int thePadding,
                                 final int theSideLength) {
        return new RoundRectangle2D.Float((theX + 1) * BOARD_SCALAR + thePadding,
                                          (HEIGHT - (theY + 1)) * BOARD_SCALAR + thePadding,
                                          BOARD_SCALAR - theSideLength,
                                          BOARD_SCALAR - theSideLength,
                                          ROUNDING_SCALAR, ROUNDING_SCALAR);
    }
}
