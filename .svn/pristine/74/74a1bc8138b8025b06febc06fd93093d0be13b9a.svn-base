/*
 * 
 */

package view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.geom.RoundRectangle2D;

import javax.swing.JPanel;

import model.AbstractPiece;
import model.Piece;

/**
 * @author Kyle Martens
 * @version 1.0
 */
@SuppressWarnings("serial")
public class NextPiecePanel extends JPanel {
    
    /**
     * 
     */
    private static final int BOARD_SCALAR = 25;
    
    /**
     * 
     */
    private static final int WIDTH = 5;
    
    /**
     * 
     */
    private static final int HEIGHT = 4;
    
    /**
     * 
     */
    private static final int ROUNDING_DIVISOR = 3;
    
    /**
     * 
     */
    private static final int ROUNDING_SCALAR = BOARD_SCALAR / ROUNDING_DIVISOR;
    
    /**
     * 
     */
    private static final int OUTER_BLOCK_PADDING = 1;
    
    /**
     * 
     */
    private static final int OUTER_BLOCK_SIZE = OUTER_BLOCK_PADDING * 2;
    
    /**
     * 
     */
    private static final Dimension SCREEN_SIZE = new Dimension(BOARD_SCALAR * WIDTH,
                                                               BOARD_SCALAR * HEIGHT);
    
    /**
     * 
     */
    private Piece myNextPiece;
    
    /**
     * 
     * @param theNextPiece 
     */
    public NextPiecePanel(final Piece theNextPiece) {
        myNextPiece = theNextPiece;
        setPreferredSize(SCREEN_SIZE);
        setBackground(Color.WHITE);
    }
    
    /**
     * 
     * @param theNextPiece 
     */
    public void setNextPiece(final Piece theNextPiece) {
        myNextPiece = theNextPiece;
    }
    
    /**
     * 
     * @return
     */
    public Piece getNextPiece() {
        return myNextPiece;
    }
    
    /**
     * {@inheritDoc}
     */
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g2d = (Graphics2D) theGraphics;
        final int[][] coords = ((AbstractPiece) myNextPiece).getRotation();

        for (int i = 0; i < coords.length; i++) {
            final Shape tetrisPiece = getTetrisBlock(coords[i][0], coords[i][1],
                                                     OUTER_BLOCK_PADDING, OUTER_BLOCK_SIZE);
            
            g2d.setColor(Color.BLACK);
            g2d.draw(tetrisPiece);
            final Color blockColor = ((AbstractPiece) myNextPiece).getBlock().getColor();
            g2d.setColor(blockColor);
            g2d.fill(tetrisPiece);
        }
    }
    
    /**
     * 
     * @param theX 
     * @param theY 
     * @param thePadding 
     * @param theSideLength 
     * @return
     */
    private Shape getTetrisBlock(final int theX, final int theY, final int thePadding,
                                 final int theSideLength) {
        return new RoundRectangle2D.Float((theX + 1) * BOARD_SCALAR + thePadding,
                                          (HEIGHT - (theY + 1)) * BOARD_SCALAR + thePadding,
                                          BOARD_SCALAR - theSideLength,
                                          BOARD_SCALAR - theSideLength,
                                          ROUNDING_SCALAR, ROUNDING_SCALAR);
    }
}
